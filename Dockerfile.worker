# Dockerfile for viral_usher worker (x64 compatible)
# Based on viral_usher/Dockerfile but adapted for x86_64 architecture

FROM python:3.12 AS build

# Build UShER from source
RUN apt-get update && apt-get install -y sudo
WORKDIR /usher
RUN git clone https://github.com/yatisht/usher.git
# Install gcc-12 and set env variables to use gcc-12
RUN apt-get update && apt-get install -y gcc-12 g++-12
ENV CC=gcc-12
ENV CXX=g++-12
RUN cd usher \
    && bash -x install/installUbuntu.sh

WORKDIR /app

COPY viral_usher/pyproject.toml .
COPY viral_usher/viral_usher viral_usher

# Download x86_64 binaries for nextclade and datasets (using musl for better compatibility)
RUN mkdir bin && cd bin \
    && wget -O nextclade https://github.com/nextstrain/nextclade/releases/latest/download/nextclade-x86_64-unknown-linux-musl \
    && wget -O nextclade_to_maple.zip https://github.com/AngieHinrichs/nextclade_to_maple/releases/latest/download/nextclade_to_maple-x86_64-unknown-linux-gnu.zip \
    && unzip nextclade_to_maple.zip \
    && rm nextclade_to_maple.zip \
    && chmod a+x *

# Install NCBI's datasets command line tool (x86_64 version)
RUN wget -O bin/datasets 'https://ftp.ncbi.nlm.nih.gov/pub/datasets/command-line/v2/linux-amd64/datasets' \
    && chmod a+x bin/datasets

# Done with build stage; set up final image

FROM python:3.12

WORKDIR /app

# Prevents Python from writing pyc files.
ENV PYTHONDONTWRITEBYTECODE=1

# Keeps Python from buffering stdout and stderr to avoid situations where
# the application crashes without emitting any logs due to buffering.
ENV PYTHONUNBUFFERED=1

# Install usher lib dependencies that are available from apt-get
RUN apt-get update && apt-get install -y --no-install-recommends \
    libboost-filesystem-dev libboost-program-options-dev libboost-iostreams-dev \
    libprotoc-dev openmpi-bin libopenmpi-dev

# Create a non-privileged user that the app will run under by default.
RUN apt-get update && apt-get install -y adduser
ARG UID=10001
RUN adduser \
    --disabled-password \
    --gecos "" \
    --home "/nonexistent" \
    --shell "/sbin/nologin" \
    --no-create-home \
    --uid "${UID}" \
    appuser

# Done with all the apt-get stuff, clean up to save space.
RUN apt-get autoclean && rm -rf /var/lib/apt/lists/*

# Install usher_to_taxonium and boto3 for S3 uploads
RUN python3 -m pip install taxoniumtools boto3

# Copy the python source code and Rust app bin into the container.
WORKDIR /app
COPY --from=build /app ./
# Install python dependencies and script.
RUN python3 -m pip install .

# Copy the built-from-source libs and usher executables into the container's /app/lib
RUN mkdir /app/lib
COPY --from=build \
    /usher/usher/build/tbb_cmake_build/tbb_cmake_build_subdir_release/libtbbmalloc_proxy.so.2 \
    /usher/usher/build/tbb_cmake_build/tbb_cmake_build_subdir_release/libtbbmalloc.so.2 \
    /usher/usher/build/tbb_cmake_build/tbb_cmake_build_subdir_release/libtbb_preview.so.2 \
    /usher/usher/build/isa-l-2.30.0/.libs/libisal.so.2 \
    /app/lib/
COPY --from=build /usher/usher/build/usher /usher/usher/build/usher-sampled \
    /usher/usher/build/matUtils /usher/usher/build/matOptimize \
    /usher/usher/build/faToVcf \
    /app/bin/

# Copy supplemental wrapper script for S3 uploads
COPY supplemental_viral_usher_build/viral_usher_build_wrapper.py /app/bin/viral_usher_build_wrapper
RUN chmod +x /app/bin/viral_usher_build_wrapper

# Switch to the non-privileged user to run the application.
USER appuser

WORKDIR /workspace

ENV PATH=/app/bin:$PATH
# Tell executables about /app/lib
ENV LD_LIBRARY_PATH=/app/lib

# Default command
CMD ["viral_usher", "--help"]
